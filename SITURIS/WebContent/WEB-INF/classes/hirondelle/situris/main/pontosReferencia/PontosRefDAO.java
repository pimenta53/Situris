package hirondelle.situris.main.pontosReferencia;

import hirondelle.situris.pub.pontosReferencias.CoordGPS;
import java.util.List;
import hirondelle.web4j.model.Id;
import hirondelle.web4j.database.DAOException;
import hirondelle.web4j.database.DuplicateException;
import hirondelle.web4j.database.SqlId;
import hirondelle.web4j.util.Util;
import hirondelle.web4j.database.Db;

/**
 * Data Access Object (DAO) for {@link Visit} objects.
 */
public final class PontosRefDAO {

	/**
	 * Return a single {@link Visit} identified by its id.
	 */
	static PontoReferencia fetch(Id idPontoRef, Id idUser) throws DAOException {
		return Db.fetch(PontoReferencia.class,
				GestaoPtRefAction.FETCH_PONTO_ADMIN, idPontoRef, idUser);
    }
	
	public List<PontoReferencia> listPaises() throws DAOException{
	  return Db.list(PontoReferencia.class, GestaoPtRefAction.LIST_PAISES);
	}

    public PontoReferencia fetch(Id idPontoRef) throws DAOException {
	        return Db.fetch(PontoReferencia.class, GestaoPtRefAction.FETCH_PONTO_ADMIN, idPontoRef);
    }
    
	List<PontoReferencia> listPtRef() throws DAOException {
      return Db.list(PontoReferencia.class, PontosAction.LIST_PONTOS_ADMIN);
	}
	
	public Integer getNumEvVis(SqlId aSql, Id aPontoRef) throws DAOException{
	  return Db.fetchValue(Integer.class, aSql, aPontoRef);
	}
	
	public List<PtRefPosicao> getRoutes(Id aPontoRef) throws DAOException{
	  return Db.list(PtRefPosicao.class, GestaoPtRefAction.GET_ROUTES, aPontoRef);
	}
	
	public boolean updatePositions(Id aIdRot, Integer aPos) throws DAOException{
	  return Util.isSuccess(Db.edit(GestaoPtRefAction.SET_NEW_POSITIONS, aIdRot, aPos));
	}
	
	/**
     * Add a new {@link Reference Point} to the database.
     *
     * @return the autogenerated database id.
     */
	public Id add(PontoReferencia aPtRef, CoordGPS aCoord ,Id aIdUser) throws DAOException{
      Id coord = Db.add(NewPtRefAction.ADD_GPS_PTREF, aCoord.getLatitude(), aCoord.getLongitude(), aCoord.getAltitude());
      return Db.add(NewPtRefAction.ADD_PONTO_ADMIN, aPtRef.getNome(),aPtRef.getDescricao(), aIdUser, coord, aPtRef.getIdPais());
	}

	/**
	 * Update an existing {@link Reference Point}.
	 */
	boolean change(PontoReferencia aPonto, CoordGPS aCoord, Id aIdUser) throws DuplicateException, DAOException {
	  Db.edit(GestaoPtRefAction.SET_GPS_PTREF, aCoord.getLatitude(), aCoord.getLongitude(), aCoord.getAltitude(), 
	              aCoord.getIdCoord());
	  return Util.isSuccess(Db.edit(GestaoPtRefAction.CHANGE_PONTO_ADMIN, aPonto.getNome(), aPonto.getDescricao(),
	              aIdUser, aPonto.getIdPais(), aPonto.getIdPtRef()));
	}

	/**
	 * Delete a {@link Reference Point}.
	 *
	 * <P>
	 * If an item is linked to this {@link Visit}, then deletion will fail, and
	 * a {@link DAOException} is thrown.
	 */
	public void delete(SqlId aSqlId,Id aPontoId) throws DAOException {
		Db.delete(aSqlId, aPontoId);
	}
}
